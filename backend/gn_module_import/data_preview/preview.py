from geonature.utils.env import DB

from ..db.queries.data_preview import (
    get_synthese_fields,
)

from gn_module_import.models import TImports
from gn_module_import.transform.nomenclatures.nomenclatures import NomenclatureTransformer
from gn_module_import.utils.imports import get_import_table_name, get_table_class
from gn_module_import.db.queries.nomenclatures import get_nomenclature_label_from_id

from sqlalchemy import inspect


def get_preview(
    imprt,
    table_name,
    total_columns,
    selected_cols,
):
    nomenclature_fields = NomenclatureTransformer().set_nomenclature_fields(
        selected_cols
    )
    for field in nomenclature_fields:
        total_columns[field["synthese_col"]] = field["transformed_col"]
    #data_preview = get_valid_user_data(table_name, total_columns, 100)
    ImportEntry = get_table_class(get_import_table_name(imprt))
    source_columns = [ ImportEntry.c[col] for col in total_columns.values() ]
    data_preview = DB.session.query(ImportEntry) \
                             .with_entities(*source_columns) \
                             .filter(ImportEntry.c.gn_is_valid == True) \
                             .limit(100) \
                             .all()

    valid_data_list = []

    #  for source columns which are mapped to the same synthese target col
    # build a dict like {'source_col': [target_col_1, target_col_2 ...]}
    modified_dict = {}
    for target, source in total_columns.items():
        if source in modified_dict:
            modified_dict[source].append(target)
        else:
            modified_dict[source] = [target]
    # calculate fixed cols
    id_dataset = imprt.id_dataset
    #  build a dict from rowProxy
    for row in data_preview:
        row_dict = {}
        key_to_remove = []
        # add fixed synthese fields
        row_dict["id_dataset"] = id_dataset
        #row_dict["id_module"] = id_module
        for key, value in zip(total_columns.values(), row):
            #  check if source field is twice or more
            nomenclature_col_dict = find_nomenclature_col(key, nomenclature_fields)
            #  build a key with source nomenclenture -> target nomenclature with decoded value
            if nomenclature_col_dict:
                user_file_col = nomenclature_col_dict["user_col"]
                new_dict_key = "{source}->{target}".format(
                    source=user_file_col, target=nomenclature_col_dict["synthese_col"]
                )
                row_dict[new_dict_key] = get_nomenclature_label_from_id(value)
                key_to_remove.append(nomenclature_col_dict["synthese_col"])
                # find target columns in the modified dict create bellow
            syn_targets = modified_dict[key]
            for syn_target in syn_targets:
                row_dict[syn_target] = value

        #  remove untransformed nomenclatures for preview
        for key in key_to_remove:
            try:
                row_dict.pop(key)
            except KeyError:
                pass

        valid_data_list.append(row_dict)

    return valid_data_list


def find_nomenclature_col(col_name: str, nomenclature_field: list) -> dict:
    nomenclature_col_dict = None
    for el in nomenclature_field:
        if el["transformed_col"] == col_name:
            nomenclature_col_dict = el
            break
    return nomenclature_col_dict


def set_total_columns(selected_cols, added_cols, import_id, module_name):
    """
    remove non synthese fields from dict 
    and set fixed synthese fields 
    """
    import_obj = DB.session.query(TImports).get(import_id)

    total_columns = {
        **selected_cols,
        **added_cols,
    }

    if import_obj.uuid_autogenerated is True:
        total_columns["unique_id_sinp"] = selected_cols.get(
            "unique_id_sinp", "gn_unique_id_sinp"
        )

    if import_obj.altitude_autogenerated is True:
        total_columns["altitude_min"] = selected_cols.get(
            "altitude_min", "gn_altitude_min"
        )
        total_columns["altitude_max"] = selected_cols.get(
            "altitude_max", "gn_altitude_max"
        )

    # remove non synthese fields from dict :
    sf = get_synthese_fields()
    sf_names = [f.column_name for f in sf]
    final_total_col = {}

    for source, target in total_columns.items():
        if source in sf_names or source.startswith("gn"):
            final_total_col[source] = target

    return final_total_col
