from itertools import groupby

from flask import jsonify
from sqlalchemy.orm import joinedload

from geonature.core.gn_permissions import decorators as permissions
from pypnnomenclature.models import BibNomenclaturesTypes

from gn_module_import.models import (
    Entity,
    BibFields,
    BibThemes,
)

from gn_module_import.blueprint import blueprint


@blueprint.route("/<destination>/fields", methods=["GET"])
@permissions.check_cruved_scope("C", get_scope=True, module_code="IMPORT", object_code="IMPORT")
def get_fields(scope, destination):
    """
    .. :quickref: Import; Get synthesis fields.

    Get all synthesis fields
    Use in field mapping steps
    You can find a jsonschema of the returned data in the associated test.
    """
    # TODO use selectinload
    fields = (
        BibFields.query.filter_by(destination=destination, display=True)
        .options(joinedload(BibFields.theme))
        .join(BibThemes)
        .order_by(BibThemes.order_theme, BibFields.order_field)
        .all()
    )
    entities = Entity.query.order_by(Entity.order).all()
    data = []
    for entity in entities:
        themes = []
        for id_theme, fields in groupby(
            filter(lambda field: field in entity.fields, fields), lambda field: field.id_theme
        ):
            fields = list(fields)
            theme = fields[0].theme
            themes.append(
                {
                    "theme": theme.as_dict(
                        fields=[
                            "id_theme",
                            "name_theme",
                            "fr_label_theme",
                            "eng_label_theme",
                            "desc_theme",
                        ],
                    ),
                    "fields": [
                        field.as_dict(
                            fields=[
                                "id_field",
                                "name_field",
                                "fr_label",
                                "eng_label",
                                "desc_field",
                                "mandatory",
                                "autogenerated",
                                "comment",
                                "multi",
                            ],
                        )
                        for field in fields
                    ],
                }
            )
        data.append(
            {
                "entity": entity.as_dict(fields=["label"]),
                "themes": themes,
            }
        )
    return jsonify(data)


@blueprint.route("/<destination>/nomenclatures", methods=["GET"])
def get_nomenclatures(destination):
    nomenclature_fields = (
        BibFields.query.filter(BibFields.destination == destination)
        .filter(BibFields.nomenclature_type != None)
        .options(
            joinedload(BibFields.nomenclature_type).joinedload(
                BibNomenclaturesTypes.nomenclatures
            ),
        )
        .all()
    )
    return jsonify(
        {
            field.nomenclature_type.mnemonique: {
                "nomenclature_type": field.nomenclature_type.as_dict(),
                "nomenclatures": {
                    nomenclature.cd_nomenclature: nomenclature.as_dict()
                    for nomenclature in field.nomenclature_type.nomenclatures
                },
            }
            for field in nomenclature_fields
        }
    )
